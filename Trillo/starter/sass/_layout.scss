.container {
	// max-width === if the viewport is smaller than the value specified, take up 100% of the space
	max-width: 120rem;

	// centers the container in its parent elem, which is the body
	margin: 8rem auto;
	background-color: var(--color-grey-light-2);
	box-shadow: var(--shadow-dark);

	min-height: 50rem;

	// DESKTOP first strategy
	@media only screen and (max-width: $bp-largest) {
		margin: 0;
		max-width: 100%;
		width: 100%;
	}
}

.header {
	// so the placeholder text will inherit
	font-size: 1.4rem;

	height: 7rem;
	background-color: #fff;
	border-bottom: var(--line);

	// puts in a row
	display: flex;

	// divides space equally between them, OR it's the one with no space at the ends
	justify-content: space-between;

	// aligns on the cross axis, a lot easier than finding the perfect margins (still need this for the WHOLE nav bar, not just the shit on the right
	align-items: center;

	@media only screen and (max-width: $bp-smallest) {
		// PUTS search bar in new row but only for super small screens
		flex-wrap: wrap;

		// increase due to spacing issues
		height: 11rem;

		align-content: space-around;
	}
}

.content {
	display: flex;

	@media only screen and (max-width: $bp-medium) {
		flex-direction: column;
	}
}

.sidebar {
	background-color: var(--color-grey-dark-1);

	// NOTE: in flex-world, flex-basis should be used for width in the shorthand flex property (it is last)
	// flex: grow shrink flex-basis
	flex: 0 0 18%;
	// since the basis value is a %, we don't want to shrink, but if it was a px value shrink would be 1

	// this code is what allows the LEGAL to be all the way at the bottom with a lot of space; we changed the axis with flex-dir, then space-between in the new direction's justify-content
	display: flex;
	flex-direction: column;
	justify-content: space-between;

}

.hotel-view {
	background-color: #fff;

	// This is just for initial TEST, so removed. let content define height of box
	// height: 80rem;

	// by using flex: 1 we are saying we want the elem to GROW (take up available space) as MUCH as it can
	flex: 1;
}

.detail {
	// CONTAINER
	display: flex;
	padding: 4.5rem;
	background-color: var(--color-grey-light-1);
	border-bottom: var(--line);

	// define fontsize on parent elem so can inherit
	font-size: 1.4rem;

	@media only screen and (max-width: $bp-medium) {
		padding: 3rem;
	}

	// NOTE: smaller queries should always come AFTER the larger ones!!!!!! important for conflicting declarations
	@media only screen and (max-width: $bp-small) {
		flex-direction: column;
	}
}

.description {
	background-color: #fff;

	// horz off set		vert offset		blur rad	opt spread rrad
	box-shadow: var(--shadow-light);

	// adding padding to make elem "grow" a bit
	padding: 3rem;

	// don't grow / don't shrink / 60% flex basis
	flex: 0 0 60%;

	margin-right: 4.5rem;
	
	@media only screen and (max-width: $bp-medium) {
		padding: 2rem;
		margin-right: 3rem;
	}

	@media only screen and (max-width: $bp-small) {
		margin-right: 0;
		margin-bottom: 3rem;
	}
}

.user-reviews {
	display: flex;
	flex-direction: column;
	align-items: center;
}